#!/bin/bash

set -x
set -e
set -u
set -o pipefail

exec 3>&1
exec 1>&2

echo "Retrieving latest Instana Backend version"

readonly destination=$1

if [ -z "${destination}" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

mkdir -p "${destination}"

readonly input_file=$(mktemp input.XXXXXX)

cat > "${input_file}" <&0

# Delete trailing `/`, as it can create issues when composing URLs later
readonly endpoint=$(jq -r .source.endpoint < "${input_file}" | sed "s,/$,,")
readonly api_token=$(jq -r .source.api_token < "${input_file}")
readonly granularity=$(jq -r '.source.granularity // ""' < "${input_file}")
format=$(jq -r '.source.format // ""' < "${input_file}")

readonly URL_REGEXP='https?://[-A-Za-z0-9\.]+(:[0-9]+)?'

if [ -z "${endpoint}" ]; then
  echo "Invalid payload: missing 'endpoint'"
  exit 1
elif ! [[ "${endpoint}" =~ ${URL_REGEXP} ]]; then
  echo "Invalid payload: the value '${endpoint}' for 'endpoint' is not valid; endpoint must match the following regex: ${URL_REGEXP}"
  exit 1
fi

if [ -z "${api_token}" ]; then
  echo "Invalid payload: missing 'api_token'"
  exit 1
fi

if [ -n "${format}" ] && [ -n "${granularity}" ]; then
  echo "Both 'format' and 'granularity' have been specified, invalid configuration"
  exit 1
fi

echo "Using the API endpoint: ${endpoint}/api/instana/version"

readonly data=$(curl --silent --show-error --fail --header "Authorization: apiToken ${api_token}" "${endpoint}/api/instana/version")
readonly branch=$(echo "${data}" | jq -er '.branch' | sed s/release-//)

readonly imageTag=$(echo "${data}" | jq -er '.imageTag')
readonly versions=( ${imageTag//./ } )

readonly major="${versions[0]}"
readonly minor="${versions[1]}"
readonly patch="${versions[2]}"

if [ -n "${granularity}" ]; then
  case "${granularity}" in
  branch)
    format='%branch%'
    ;;
  full)
    format='%full%'
    ;;
  major)
    format='%major%'
    ;;
  minor)
    format='%major%.%minor%'
    ;;
  patch)
    format='%major%.%minor%.%patch%'
    ;;
  *)
    echo "Invalid granularity '$granularity'. Must be one of 'branch', 'full', 'major', 'minor' or 'patch'."
    exit 1
    ;;
  esac
fi

if [ -z "${format}" ]; then
  format='%branch%'
fi

version="${format}"
version="${version//%branch%/${branch}}"
version="${version//%full%/${imageTag}}"
version="${version//%major%/${major}}"
version="${version//%minor%/${minor}}"
version="${version//%patch%/${patch}}"

echo "${version}" > "${destination}/release"
echo "${imageTag}" > "${destination}/image_tag"
echo "${branch}" > "${destination}/branch"
echo "${major}" > "${destination}/major"
echo "${minor}" > "${destination}/minor"
echo "${patch}" > "${destination}/patch"

jq -n "{
  \"version\": {
    \"release\": \"${version}\"
  },
  \"metadata\": [
    {
      \"name\": \"version\",
      \"value\": \"${version}\"
    },
    {
      \"name\": \"patch\",
      \"value\": \"${patch}\"
    },
    {
      \"name\": \"minor\",
      \"value\": \"${minor}\"
    },
    {
      \"name\": \"major\",
      \"value\": \"${major}\"
    },
    {
      \"name\": \"branch\",
      \"value\": \"${branch}\"
    },
    {
      \"name\": \"image_tag\",
      \"value\": \"${imageTag}\"
    }
  ]
}" >&3
